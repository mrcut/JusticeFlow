const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/User");
const router = express.Router();

// üîë Inscription
router.post("/register", async (req, res) => {
  try {
    const { username, email, password } = req.body;

    console.log("üìå Mot de passe re√ßu :", password); // üîπ V√©rifier le mot de passe brut

    // Hash du mot de passe
    const hashedPassword = await bcrypt.hash(password, 10);

    console.log("üîê Mot de passe hash√© :", hashedPassword); // üîπ V√©rifier si le hash est correct

    // Cr√©ation de l'utilisateur
    const newUser = new User({ username, email, password: hashedPassword });
    await newUser.save();

    res.status(201).json({ message: "Utilisateur cr√©√© avec succ√®s !" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// üîë Connexion
router.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;

    // V√©rifie si l'utilisateur existe
    const user = await User.findOne({ email });
    if (!user) {
      console.log("‚ùå Utilisateur introuvable !");
      return res.status(400).json({ error: "Utilisateur introuvable" });
    }

    console.log("üîë Utilisateur trouv√© :", user.email);
    console.log("üìå Mot de passe stock√© :", user.password);
    console.log("üìå Mot de passe entr√© :", password);

    // V√©rification du mot de passe
    const isMatch = await bcrypt.compare(password, user.password);
    console.log("üîç bcrypt.compare() =>", isMatch);

    if (!isMatch) {
      console.log("‚ùå Mot de passe incorrect !");
      return res.status(400).json({ error: "Mot de passe incorrect" });
    }

    // G√©n√®re le token JWT
    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {
      expiresIn: "1d",
    });

    console.log("‚úÖ Connexion r√©ussie !");
    res.json({
      token,
      user: { id: user._id, username: user.username, email: user.email },
    });
  } catch (err) {
    console.error("‚ö†Ô∏è Erreur serveur :", err);
    res.status(500).json({ error: "Erreur serveur" });
  }
});

// üîë V√©rification du token
router.get("/me", async (req, res) => {
  try {
    const token = req.headers["authorization"];
    if (!token) return res.status(401).json({ error: "Acc√®s refus√©" });

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findById(decoded.id).select("-password");

    res.json(user);
  } catch (err) {
    res.status(500).json({ error: "Token invalide" });
  }
});

module.exports = router;
